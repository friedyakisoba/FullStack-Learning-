// 1. Deposit some money


// 2. Determine number of line to bet on
// 3. Collect a bet amount
// 4. Spin the slot machine
// 5. Check if the user won
// 6. give the user their winnings or losses
// 7. play again

const prompt = require("prompt-sync")();

const ROWS = 3;
const COLS = 3;

const SYMBOLS_COUNT = {
    A: 2,
    B: 4,
    C: 6,
    D: 8
}

const SYMBOL_VALUES = {
    A : 5,
    B : 4,
    C : 3,
    D : 2
}

// 1
// newer style to call a function
const deposit = () => {

    // loops until the user enters a number 
    while (true) {
        const depositAmount = prompt("Enter a deposit ammount: ");

        //convert the input to a floating number
        const numberDepositAmount = parseFloat(depositAmount);

        // function to check if the user inputs a number or a string
        if (isNaN(numberDepositAmount) || numberDepositAmount <= 0) {
            console.log("Invalid deposit amount, try again.");
        } else {
            // breaks the loop when the user enters a number
            return numberDepositAmount;
        }
    }
};


// 2
const getNumberOflines = () => {
     while (true) {
        const lines = prompt("Enter the number of line to bet on (1-3): ");
        const numberOfLines = parseFloat(lines);

        if (isNaN(numberOfLines) || numberOfLines <= 0|| numberOfLines > 3)  {
            console.log("Invalid number of lines, try again.");
        } else {
            return numberOfLines;
        }
    }

};

// 3
const getBet = (balance, lines) => {
    while (true) {
        const bet = prompt("Enter the bet per line: ");
        const numberBet = parseFloat(bet);

        if (isNaN(numberBet) || numberBet <= 0|| numberBet > balance / lines)  {
            console.log("Invalid bet, try again.");
        } else {
            return numberBet;
        }
    }
};


// 4.

const spin = () => {
    const symbols = [];
    for (const [symbol, count] of Object.entries(SYMBOLS_COUNT)){
        for (let i = 0; i < count; i++){
            symbols.push(symbol);
        }
    }

    const reels =[];
    for (let i = 0; i < COLS; i++) {
        reels.push([]);   
        const reelSymbols = [...symbols];
        for (let j = 0; j < ROWS; j++){
            const randomIndex = Math.floor(Math.random() * reelSymbols.length)
            const selectedSymbol = reelSymbols[randomIndex];
            reels[i].push(selectedSymbol);
            reelSymbols.splice(randomIndex, 1);

        }
    }
    return reels;
};


const transpose = (reels) => {
    const rows = [];

    for (let i = 0; i < ROWS; i++){
        rows.push([]);
        for (let j = 0; j< COLS; j++) {
            rows[i].push(reels[j][i])
        }
    }

    return rows;

};

const printRows = (rows) => {
    for (const row of rows) {
        let rowString = "";
        for(const [i, symbol] of row.entries()){
            rowString += symbol
            if (i != row.length - 1) {
                rowString += " | "
            }
        }
        console.log(rowString);
    }
};


const getWinnings = (rows, bet, lines) => {
    let winnings = 0;

    for(let row = 0; )
}




let balance = deposit();
const numberOfLines = getNumberOflines();
const bet = getBet(balance, numberOfLines);

const reels = spin();
const rows = transpose(reels);
printRows(rows);
